version: "3.8"
services:
  db:
    image: postgres:14-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    deploy:
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.role==manager"
    environment:
      - POSTGRES_DB=grrss
      - POSTGRES_USER=grrss
      - POSTGRES_PASSWORD=grrss_secret
    ports:
      - 54333:5432
    networks:
      - grrss_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "grrss"]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management-alpine
    deploy:
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.role==manager"
    environment:
      - RABBITMQ_DEFAULT_USER=grrss
      - RABBITMQ_DEFAULT_PASS=grrss_secret
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - grrss_network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
    restart: unless-stopped

  rss_service:
    build:
      context: rss_service
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - grrss_network
    environment:
      - RABBITMQ_URL=amqp://grrss:grrss_secret@rabbitmq:5672
    restart: unless-stopped

  ror:
    build:
      context: ror
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      rss_service:
        condition: service_started
    networks:
      - grrss_network
    environment:
      - RAILS_ENV=development
      - RAILS_SERVE_STATIC_FILES=true
      - RABBITMQ_URL=amqp://grrss:grrss_secret@rabbitmq:5672
      - GRRSS_DATABASE_HOST=db
      - GRRSS_DATABASE_USERNAME=grrss
      - GRRSS_DATABASE_PASSWORD=grrss_secret
    ports:
      - 3000:3000
    restart: unless-stopped

volumes:
  db-data:

networks:
  grrss_network:
